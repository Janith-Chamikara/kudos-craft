name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]

env:
  NODE_VERSION: "18"

jobs:
  deploy-check:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'

    steps:
      - name: CI Status Check
        run: echo "CI passed, proceeding with deployment"

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: deploy-check
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build application
        working-directory: ./backend
        run: npm run build

      # Example deployment to Heroku (replace with your deployment target)
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "your-backend-app-name"
          heroku_email: "your-email@example.com"
          appdir: "backend"

    # Alternative: Deploy to Railway
    # - name: Deploy to Railway
    #   uses: bervProject/railway-deploy@v1.0.0
    #   with:
    #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
    #     service: "backend"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-check
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      # Example deployment to Vercel
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./frontend

  # Desktop app release (only on tags)
  release-desktop:
    name: Release Desktop App
    runs-on: windows-latest
    needs: deploy-check
    if: startsWith(github.ref, 'refs/tags/') && success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "6.0"

      - name: Restore dependencies
        working-directory: ./desktop/KudosCraft
        run: dotnet restore

      - name: Publish application
        working-directory: ./desktop/KudosCraft
        run: dotnet publish -c Release -o publish/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./desktop/KudosCraft/publish/
          asset_name: KudosCraft-${{ github.ref }}.zip
          asset_content_type: application/zip
