// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id                      String      @id @default(uuid())
//   email                   String      @unique
//   bio                     String?
//   firstName               String
//   lastName                String
//   usage                   String      @default("personal")
//   companyName             String?
//   industryType            String?
//   numberOfEmployees       String?
//   job                     String?
//   subscriptionPlan        String      @default("free")
//   role                    String      @default("user")
//   createdAt               DateTime    @default(now())
//   updatedAt               DateTime    @updatedAt
//   password                String
//   isInitialSetupCompleted Boolean     @default(false)
//   //relations
//   workspaces              Workspace[]

//   @@index([email])
// }

// model Workspace {
//   id          String   @id @default(uuid())
//   name        String
//   description String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   //relations
//   ownerId     String
//   testimonial Testimonial[]
//   owner       User          @relation(fields: [ownerId], references: [id])

//   @@index([id])
// }

// model Testimonial {
//   id         String   @id @default(uuid())
//   name       String
//   email      String
//   ratings    Float
//   review     String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   isAnalyzed Boolean  @default(false)
//   sentiment  String?

//   //relations
//   workspaceId String
//   workspace   Workspace @relation(fields: [workspaceId], references: [id])

//   @@index([id])
// }
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String   @id @default(uuid())
  email                   String   @unique
  bio                     String?
  firstName               String
  lastName                String
  usage                   String   @default("personal")
  companyName             String?
  industryType            String?
  numberOfEmployees       String?
  job                     String?
  subscriptionPlan        String   @default("free")
  role                    String   @default("user")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  password                String
  isInitialSetupCompleted Boolean  @default(false)

  // Subscription fields
  stripeCustomerId   String?   @unique
  subscriptionStatus String? // active, trialing, canceled, etc.
  subscriptionId     String?   @unique
  currentPeriodEnd   DateTime?

  // Relations
  workspaces    Workspace[]
  subscriptions Subscription[]
  invoices      Invoice[]

  @@index([email])
}

model Subscription {
  id                   String    @id @default(uuid())
  stripeSubscriptionId String    @unique
  status               String // active, canceled, etc.
  planId               String
  startDate            DateTime
  endDate              DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  invoices Invoice[]

  @@index([userId])
}

model Invoice {
  id              String    @id @default(uuid())
  stripeInvoiceId String    @unique
  amount          Float
  currency        String
  status          String // paid, unpaid, void
  invoiceDate     DateTime
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([userId])
  @@index([subscriptionId])
}

model Workspace {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  testimonial Testimonial[]
  owner       User          @relation(fields: [ownerId], references: [id])

  @@index([id])
}

model Testimonial {
  id         String   @id @default(uuid())
  name       String
  email      String
  ratings    Float
  review     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isAnalyzed Boolean  @default(false)
  sentiment  String?

  // Relations
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([id])
}
