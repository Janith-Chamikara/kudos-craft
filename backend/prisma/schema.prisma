generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(uuid())
  email                   String         @unique
  bio                     String?
  firstName               String
  lastName                String
  usage                   String         @default("personal")
  companyName             String?
  industryType            String?
  numberOfEmployees       String?
  job                     String?
  subscriptionPlan        String         @default("free")
  role                    String         @default("user")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  password                String
  isInitialSetupCompleted Boolean        @default(false)
  currentPeriodEnd        DateTime?
  stripeCustomerId        String?        @unique
  subscriptionId          String?        @unique
  subscriptionStatus      String?
  invoices                Invoice[]
  subscriptions           Subscription[]
  workspaces              Workspace[]

  @@index([email])
}

model Subscription {
  id                   String    @id @default(uuid())
  stripeSubscriptionId String    @unique
  status               String
  planId               String
  startDate            DateTime
  endDate              DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               String
  invoices             Invoice[]
  user                 User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Invoice {
  id              String        @id @default(uuid())
  stripeInvoiceId String        @unique
  amount          Float
  currency        String
  status          String
  invoiceDate     DateTime
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  subscriptionId  String?
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([subscriptionId])
}

model Workspace {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ownerId     String
  testimonial Testimonial[]
  owner       User          @relation(fields: [ownerId], references: [id])

  @@index([id])
}

model Testimonial {
  id          String    @id @default(uuid())
  name        String
  email       String
  ratings     Float
  review      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isAnalyzed  Boolean   @default(false)
  sentiment   String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([id])
}
